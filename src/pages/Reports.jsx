import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Grid,
  Card,
  CardContent,
  CardHeader,
  Divider,
  Menu,
  MenuItem,
  ListItemIcon,
  TextField,
  FormControl,
  InputLabel,
  Select,
  CircularProgress,
  Snackbar,
  Alert,
  Paper,
  useTheme,
  IconButton,
  Tooltip
} from '@mui/material';
import {
  GridOn,
  Download,
  MoreVert,
  DateRange,
  FilterAlt,
  Refresh,
  Share,
  Print,
  InsertDriveFile
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { saveAs } from 'file-saver';
import * as XLSX from 'xlsx';
import { useAuth } from '../context/AuthContext';
import expenseService from '../services/expense.service';
import budgetService from '../services/budget.service';

const Reports = () => {
  const { user } = useAuth();
  const theme = useTheme();
  const [loading, setLoading] = useState(false);
  const [expenses, setExpenses] = useState([]);
  const [budgets, setBudgets] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const [reportType, setReportType] = useState('expenses');
  const [dateRange, setDateRange] = useState({
    start: new Date(new Date().setMonth(new Date().getMonth() - 1)),
    end: new Date()
  });
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [anchorEl, setAnchorEl] = useState(null);

  // Sample categories - replace with your actual categories
  const categories = [
    'Food', 'Transportation', 'Housing', 'Entertainment',
    'Utilities', 'Healthcare', 'Education', 'Shopping', 'Other'
  ];

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    filterData();
  }, [expenses, budgets, reportType, dateRange, categoryFilter]);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [expensesRes, budgetsRes] = await Promise.all([
        expenseService.getExpenses(),
        budgetService.getBudgets(),
      ]);
      setExpenses(expensesRes.data);
      setBudgets(budgetsRes.data);
    } catch (err) {
      showSnackbar('Failed to fetch data', 'error');
    } finally {
      setLoading(false);
    }
  };

  const filterData = () => {
    let data = reportType === 'expenses' ? [...expenses] : [...budgets];
    
    // Filter by date range
    data = data.filter(item => {
      const itemDate = new Date(item.date || item.createdAt);
      return itemDate >= dateRange.start && itemDate <= dateRange.end;
    });
    
    // Filter by category
    if (categoryFilter !== 'all') {
      data = data.filter(item => item.category === categoryFilter);
    }
    
    setFilteredData(data);
  };

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleMenuClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const generateExcel = () => {
    const title = `${reportType === 'expenses' ? 'Expenses' : 'Budgets'} Report`;
    const dateStr = `${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}`;
    
    // Prepare worksheet data
    const headers = reportType === 'expenses' 
      ? ['Date', 'Category', 'Amount', 'Description']
      : ['Category', 'Amount', 'Period', 'Created At'];
    
    const data = filteredData.map(item => {
      return reportType === 'expenses'
        ? {
            Date: new Date(item.date).toLocaleDateString(),
            Category: item.category,
            Amount: item.amount,
            Description: item.description || '-'
          }
        : {
            Category: item.category,
            Amount: item.amount,
            Period: item.period,
            'Created At': new Date(item.createdAt).toLocaleDateString()
          };
    });
    
    // Add summary row
    const total = filteredData.reduce((sum, item) => sum + item.amount, 0);
    data.push({
      [headers[0]]: 'TOTAL',
      [headers[1]]: total,
      [headers[2]]: '',
      [headers[3]]: ''
    });
    
    // Create workbook and worksheet
    const wb = XLSX.utils.book_new();
    const ws = XLSX.utils.json_to_sheet(data, { headers });
    
    // Add metadata
    const metadata = [
      [title],
      [`Date Range: ${dateStr}`],
      [`Generated by: ${user?.name}`],
      [`Generated on: ${new Date().toLocaleDateString()}`],
      []
    ];
    XLSX.utils.sheet_add_aoa(ws, metadata, { origin: 'A1' });
    
    // Style the header row
    if (!ws['!cols']) ws['!cols'] = [];
    headers.forEach((_, i) => {
      ws['!cols'][i] = { width: 20 };
    });
    
    // Add worksheet to workbook
    XLSX.utils.book_append_sheet(wb, ws, 'Report');
    
    // Generate Excel file and save
    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    saveAs(blob, `${title}_${dateStr.replace(/\//g, '-')}.xlsx`);
    showSnackbar('Excel report generated successfully');
    handleMenuClose();
  };

  const handleDateChange = (date, type) => {
    setDateRange(prev => ({
      ...prev,
      [type]: date
    }));
  };

  return (
    <Box sx={{ p: 3 }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" fontWeight="bold">
          Financial Reports
        </Typography>
        <Box display="flex" gap={2}>
          <Tooltip title="Refresh data">
            <IconButton onClick={fetchData} color="primary">
              <Refresh />
            </IconButton>
          </Tooltip>
          <Button
            variant="contained"
            startIcon={<Download />}
            onClick={handleMenuClick}
            sx={{
              bgcolor: theme.palette.primary.main,
              '&:hover': { bgcolor: theme.palette.primary.dark }
            }}
          >
            Generate Report
          </Button>
          <Menu
            anchorEl={anchorEl}
            open={Boolean(anchorEl)}
            onClose={handleMenuClose}
            PaperProps={{
              sx: {
                width: 200,
                borderRadius: 2,
                boxShadow: theme.shadows[3]
              }
            }}
          >
            <MenuItem onClick={generateExcel}>
              <ListItemIcon>
                <GridOn color="success" />
              </ListItemIcon>
              Excel Report
            </MenuItem>
          </Menu>
        </Box>
      </Box>

      <Grid container spacing={3}>
        {/* Filters Card */}
        <Grid item xs={12} md={4}>
          <Card elevation={3}>
            <CardHeader
              title="Report Filters"
              avatar={<FilterAlt color="primary" />}
              sx={{ bgcolor: theme.palette.background.paper }}
            />
            <Divider />
            <CardContent>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <Grid container spacing={2}>
                  <Grid item xs={12}>
                    <FormControl fullWidth>
                      <InputLabel>Report Type</InputLabel>
                      <Select
                        value={reportType}
                        onChange={(e) => setReportType(e.target.value)}
                        label="Report Type"
                      >
                        <MenuItem value="expenses">Expenses</MenuItem>
                        <MenuItem value="budgets">Budgets</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <DatePicker
                      label="Start Date"
                      value={dateRange.start}
                      onChange={(date) => handleDateChange(date, 'start')}
                      renderInput={(params) => <TextField {...params} fullWidth />}
                      maxDate={dateRange.end}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <DatePicker
                      label="End Date"
                      value={dateRange.end}
                      onChange={(date) => handleDateChange(date, 'end')}
                      renderInput={(params) => <TextField {...params} fullWidth />}
                      minDate={dateRange.start}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <FormControl fullWidth>
                      <InputLabel>Category</InputLabel>
                      <Select
                        value={categoryFilter}
                        onChange={(e) => setCategoryFilter(e.target.value)}
                        label="Category"
                      >
                        <MenuItem value="all">All Categories</MenuItem>
                        {categories.map((category) => (
                          <MenuItem key={category} value={category}>
                            {category}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>
                  </Grid>
                </Grid>
              </LocalizationProvider>
            </CardContent>
          </Card>
        </Grid>

        {/* Report Preview */}
        <Grid item xs={12} md={8}>
          <Card elevation={3} sx={{ height: '100%' , width:'60rem' }}>
            <CardHeader
              title="Report Preview"
              avatar={<InsertDriveFile color="primary" />}
              action={
                <Typography variant="body2" color="text.secondary" sx={{ mr: 2 }}>
                  {filteredData.length} records found
                </Typography>
              }
              sx={{ bgcolor: theme.palette.background.paper }}
            />
            <Divider />
            <CardContent>
              {loading ? (
                <Box display="flex" justifyContent="center" alignItems="center" height={300}>
                  <CircularProgress size={60} />
                </Box>
              ) : filteredData.length === 0 ? (
                <Box
                  display="flex"
                  flexDirection="column"
                  justifyContent="center"
                  alignItems="center"
                  height={300}
                  textAlign="center"
                >
                  <DateRange color="disabled" sx={{ fontSize: 60, mb: 2 }} />
                  <Typography variant="h6" color="text.secondary">
                    No data found for selected filters
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                    Try adjusting your date range or category filters
                  </Typography>
                </Box>
              ) : (
                <Box sx={{ overflow: 'auto', maxHeight: 700 }}>
                  <Paper variant="outlined" sx={{ p: 2 }}>
                    <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                      <thead>
                        <tr style={{ backgroundColor: theme.palette.grey[200] }}>
                          {reportType === 'expenses' ? (
                            <>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Date</th>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Category</th>
                              <th style={{ padding: '12px', textAlign: 'right' }}>Amount</th>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Description</th>
                            </>
                          ) : (
                            <>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Category</th>
                              <th style={{ padding: '12px', textAlign: 'right' }}>Amount</th>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Period</th>
                              <th style={{ padding: '12px', textAlign: 'left' }}>Created At</th>
                            </>
                          )}
                        </tr>
                      </thead>
                      <tbody>
                        {filteredData.map((item, index) => (
                          <tr 
                            key={index} 
                            style={{ 
                              borderBottom: `1px solid ${theme.palette.divider}`,
                              backgroundColor: index % 2 === 0 ? 'inherit' : theme.palette.grey[50]
                            }}
                          >
                            {reportType === 'expenses' ? (
                              <>
                                <td style={{ padding: '12px' }}>
                                  {new Date(item.date).toLocaleDateString()}
                                </td>
                                <td style={{ padding: '12px' }}>{item.category}</td>
                                <td style={{ padding: '12px', textAlign: 'right' }}>
                                  ${item.amount.toFixed(2)}
                                </td>
                                <td style={{ padding: '12px' }}>
                                  {item.description || '-'}
                                </td>
                              </>
                            ) : (
                              <>
                                <td style={{ padding: '12px' }}>{item.category}</td>
                                <td style={{ padding: '12px', textAlign: 'right' }}>
                                  ${item.amount.toFixed(2)}
                                </td>
                                <td style={{ padding: '12px' }}>{item.period}</td>
                                <td style={{ padding: '12px' }}>
                                  {new Date(item.createdAt).toLocaleDateString()}
                                </td>
                              </>
                            )}
                          </tr>
                        ))}
                      </tbody>
                      <tfoot>
                        <tr style={{ backgroundColor: theme.palette.grey[100] }}>
                          <td 
                            colSpan={reportType === 'expenses' ? 2 : 1} 
                            style={{ padding: '12px', fontWeight: 'bold' }}
                          >
                            TOTAL
                          </td>
                          <td style={{ padding: '12px', textAlign: 'right', fontWeight: 'bold' }}>
                            ${filteredData.reduce((sum, item) => sum + item.amount, 0).toFixed(2)}
                          </td>
                          <td colSpan={reportType === 'expenses' ? 1 : 2}></td>
                        </tr>
                      </tfoot>
                    </table>
                  </Paper>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={snackbar.severity}
          variant="filled"
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Reports;